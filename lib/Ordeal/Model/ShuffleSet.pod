=pod

=for vim
   vim: tw=72 ts=3 sts=3 sw=3 et ai :

=encoding utf8

=head1 NAME

Ordeal::Model::ShuffleSet - Collections of shuffles

=head1 SYNOPSIS

   use Ordeal::Model::ShuffleSet;

   my $shfls = Ordeal::Model::ShuffleSet->create(%args);

   my @shuffles = $shfls->shuffles;
   my @cards = $shfls->draw;

   $shfls->reshuffle;
   my @other_cards = $shfls->draw;

=head1 DESCRIPTION

This class represents a collection of L<Ordeal::Model::Shuffle> objects.
It allows you to draw multiple cards from multiple shuffles at the same
time.

For example, this allows you to represent "throwing N dice" in the
following setup:

=over

=item *

you define your L<Ordeal::Model::Deck> to be composed of six cards

=item *

define a set of shuffles wrapping that deck, with the extraction of one
card per draw.

=back

Of course you can generalize this to draw from different dice (just
provide a different six-cards deck to each shuffle) or to take multiple
cards from the same deck.

Instead of the constructor, it is better to use the factory method
L</create>. Then, you can draw cards with L</draw>.

Each shuffle has an independent lifecycle and might run out of cards
eventually; you can either access each of them using L</shuffles>, or
L</reshuffle> them all at the same time. You can even set an option to
automatically reshuffle after each draw (for easier simulation of dice).


=head1 METHODS

=head2 B<< create >>

   my $shfls = Ordeal::Model::ShuffleSet->create(%args);

create a new object, with proper "massaging" of C<%args>.

The following keys are supported in C<%args>:

=over

=item C<< auto_reshuffle >>

automatically reshuffle the whole set after each draw (allows easy
simulation of dice).

=item C<< items >>

reference to an array of items to be part of the set. The exact shape of
an input item is described below; all of them will be normalized to an
internal definition of a L<Ordeal::Model::Shuffle>.

=item C<< default_n_draw >>

the default number of cards to be drawn from a shuffle. Defaults to
C<undef> (i.e. it will translate to whatever default is the shuffle).

=item C<< ordeal >>

an instance of C<Ordeal::Model>, used for retrieving decks in case of
need. Optional if L</item> are always decks or shuffles themselves.

=item C<< random_source >>

a default random source to be used in common by all shuffles. Any specific
random source set in a definition overrides this, even an explicit
C<undef> taht will trigger creation of a shuffle-specific random source.
It is not used for items passed as shuffles.

=back

When passing the different C<item>s above, each can be one of the
following:

=over

=item *

a simple scalar, interpreted as an L<Ordeal::Model::Deck> identifier and
used to instantiate an L<Ordeal::Model::Shuffle>, possibly using
C<random_source> if present;

=item *

a hash reference with parameters for instantiating an
L<Ordeal::Model::Shuffle>, possibly including a key C<deck_id> that is
turned into a L<Ordeal::Model::Deck>;

=item *

an L<Ordeal::Model::Deck>, then wrapped inside an
L<Ordeal::Model::Shuffle>

=item *

an L<Ordeal::Model::Shuffle>, used directly.

=back

=head2 B<< draw >>

   my @cards = $shfls->draw;

draw cards from each of the L</shuffles>, each invoked with its method
L<Ordeal::Model::Shuffle::draw> with the default number of cards for the
specific item.

If L</auto_reshuffle> is set, L</reshuffle> is called at each invocation
of this method, I<after> the cards have been drawn in the specific
invocation.

=head2 B<< reshuffle >>

   $shfls->reshuffle;

Reshuffle all L<Ordeal::Model::Shuffle> objects in L</shuffles>.

=head2 B<< shuffles >>

   my $array_ref = $shfls->shuffles;
   $shfls->shuffles(\@array_of_shuffles);

accessor for the shuffle objects. Don't mess with it, in general.

=head1 BUGS AND LIMITATIONS

The code leverages some experimental Perl features like signatures and
postderef; for this reason, at least perl 5.20 will be needed.

Report bugs through GitHub (patches welcome) at
L<https://github.com/polettix/Ordeal-Model>.

=head1 AUTHOR

Flavio Poletti <polettix@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018 by Flavio Poletti <polettix@cpan.org>

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
