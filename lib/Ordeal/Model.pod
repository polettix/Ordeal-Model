=pod

=for vim
   vim: tw=72 ts=3 sts=3 sw=3 et ai :

=encoding utf8

=head1 NAME

Ordeal::Model - Manage cards and decks

=head1 VERSION

This document describes Ordeal::Model version {{[ version ]}}.

=begin html

<a href="https://travis-ci.org/polettix/Ordeal-Model">
<img alt="Build Status" src="https://travis-ci.org/polettix/Ordeal-Model.svg?branch=master">
</a>

<a href="https://www.perl.org/">
<img alt="Perl Version" src="https://img.shields.io/badge/perl-5.10+-brightgreen.svg">
</a>

<a href="https://badge.fury.io/pl/Ordeal-Model">
<img alt="Current CPAN version" src="https://badge.fury.io/pl/Ordeal-Model.svg">

</a>

<a href="http://cpants.cpanauthors.org/dist/Ordeal-Model">
<img alt="Kwalitee" src="http://cpants.cpanauthors.org/dist/Ordeal-Model.png">
</a>

<a href="http://www.cpantesters.org/distro/O/Ordeal-Model.html?distmat=1">
<img alt="CPAN Testers" src="https://img.shields.io/badge/cpan-testers-blue.svg">
</a>

<a href="http://matrix.cpantesters.org/?dist=Ordeal-Model">
<img alt="CPAN Testers Matrix" src="https://img.shields.io/badge/matrix-@testers-blue.svg">
</a>

=end html

=head1 SYNOPSIS

   use Ordeal::Model;

   # get a list of all cards, either as an iterator or as a list
   my $cards_iterator = get_cards();
   my $card = $cards_iterator->();
   my @cards = get_cards();

   # get a list of cards, based on a query. Again, both interfaces
   # are available, we'll use the iterator from now on
   my $it = get_cards(query => {group => ['mine']});
   my $it = get_cards(query => {group => ['a', 'b'], id => \@ids});

   # get one single card, by identifier. Two alternatives:
   my $card = get_card($id);
   my $card = get_cards(query => {id => [$id]})->();


=head1 DESCRIPTION

This module allows you to manage cards and group them into decks. The
main goal is to provide an easy mean to shuffle decks and get some cards
out of them.


=head1 METHODS

=head2 B<< get_card >>

   my $card = $o->get_card($id);

get a card.

=head2 B<< get_cards >>

   my @cards    = $o->get_cards(%args); # list-returning interface
   my $iterator = $o->get_cards(%args); # iterator-returning interface

get a list of cards. The following keys are supported in C<%args>:

=over

=item C<< query >>

a filtering to the queried data. This will be somehow a flux in the
beginning, although providing either a value or a list of verbatim
values for any field in a card SHOULD be supported and future proof.

=back

=head2 B<< get_deck >>

   my @cards    = $o->get_deck($id, %args); # list-returning interface
   my $iterator = $o->get_deck($id, %args); # iterator-returning

get a deck, possibly shuffled. The following keys are supported in
C<%args>:

=over

=item C<shuffle>

boolean, indicates whether to shuffle the deck or not. Defaults to C<1>
i.e. a true value.

=item C<n>

integer, indicates how many cards to return from the deck. Defaults to
C<undef> which means the whole deck.

=item C<seed>

opaque data useful for seeding the relevant generator of random data.
Implies C<shuffle> above even if explicitly set to a false value.

=back

=head1 BUGS AND LIMITATIONS

The code leverages some experimental Perl features like signatures and
postderef; for this reason, at least perl 5.20 will be needed.

Report bugs through GitHub (patches welcome) at
L<https://github.com/polettix/Ordeal-Model>.

=head1 SEE ALSO

Foo::Bar.

=head1 AUTHOR

Flavio Poletti <polettix@cpan.org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018 by Flavio Poletti <polettix@cpan.org>

This module is free software. You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
